/**
 * Grocery List Web App - Google Apps Script
 *
 * This script provides the backend functionality for a grocery list web application.
 * It connects to a Google Sheet that stores grocery items with their added dates
 * and purchase status.
 *
 * Features:
 * - Retrieves the grocery list data (GET)
 * - Adds new items to the list with timestamps (POST)
 * - Updates the purchase status of items (PUT)
 * - Handles preflight OPTIONS requests for CORS (OPTIONS)
 */

// Global variables
const SHEET_NAME = "GroceryList";
const HEADERS = ["Item", "Added Date", "Purchased"];

/**
 * Initializes the spreadsheet if it doesn't exist or doesn't have the correct headers.
 * This ensures the sheet is properly set up when the app is first deployed.
 */
function initializeSpreadsheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(SHEET_NAME);

  // Create the sheet if it doesn't exist
  if (!sheet) {
    sheet = ss.insertSheet(SHEET_NAME);
    sheet.appendRow(HEADERS);
    sheet.getRange(1, 1, 1, HEADERS.length).setFontWeight("bold");
  } else {
    // Verify headers
    const existingHeaders = sheet.getRange(1, 1, 1, HEADERS.length).getValues()[0];
    if (!arraysEqual(existingHeaders, HEADERS)) {
      // Clear and reinitialize if headers don't match
      sheet.clear();
      sheet.appendRow(HEADERS);
      sheet.getRange(1, 1, 1, HEADERS.length).setFontWeight("bold");
    }
  }

  return sheet;
}

/**
 * Helper function to compare arrays (used for header verification)
 */
function arraysEqual(a, b) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

/**
 * Handles GET requests to retrieve the grocery list data or OPTIONS preflight requests.
 * Returns the list as JSON for the frontend to display, or responds to preflight requests.
 *
 * @param {Object} e - The event object from the request
 * @return {HTMLOutput} - JSON response containing the grocery list data or preflight response
 */
function doGet(e) {
  // Check if the request is an OPTIONS request based on the method and request header.
  if (e.request && e.request.method === 'OPTIONS') {
    return handleOptionsRequest();
  }

  try {
    const sheet = initializeSpreadsheet();

    // Get all data excluding the header row
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    const headers = values.shift();  // Remove and store headers

    // Transform data into array of objects
    const items = values.map((row, index) => ({
      id: index + 1,  // Use row index + 1 as ID
      item: row[0],
      addedDate: row[1],
      purchased: row[2] === "true" || row[2] === true
    }));

    // Return the data as JSON
    return ContentService.createTextOutput(JSON.stringify({
      status: "success",
      data: items
    }))
    .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      status: "error",
      message: error.toString()
    }))
    .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Handles OPTIONS requests by returning the required CORS headers.
 *
 * @return {HTMLOutput} - A successful response with CORS headers
 */
function handleOptionsRequest() {
  const output = HtmlService.createHtmlOutput('');
  output.addHeader('Access-Control-Allow-Origin', '*');
  output.addHeader('Access-Control-Allow-Methods', 'GET, POST, PUT');
  output.addHeader('Access-Control-Allow-Headers', 'Content-Type');
  output.addHeader('Access-Control-Max-Age', '3600');
  return output;
}

/**
 * Handles POST requests to add new items to the grocery list.
 * Adds a new row with the item name, current timestamp, and "false" for purchased status.
 *
 * @param {Object} e - The event object from the request containing the item name
 * @return {HTMLOutput} - JSON response indicating success or failure
 */
function doPost(e) {
  try {
    const sheet = initializeSpreadsheet();
    const postData = e.parameter;
    const itemName = postData.item;
    if (!itemName || itemName.trim() === "") {
      throw new Error("Item name is required");
    }
    const currentDate = new Date();
    sheet.appendRow([itemName, currentDate, false]);
    const newId = sheet.getLastRow() -1;
    return ContentService.createTextOutput(JSON.stringify({
      status: "success",
      message: "Item added successfully",
      data: {
        id: newId,
        item: itemName,
        addedDate: currentDate,
        purchased: false,
      },
    }))
    .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      status: "error",
      message: error.toString(),
    }))
    .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Handles PUT requests to update the purchase status of an item.
 * Toggles the "Purchased" value for the specified item.
 *
 * @param {Object} e - The event object containing the item ID and new purchase status
 * @return {HTMLOutput} - JSON response indicating success or failure
 */
function doPut(e) {
  try {
    const sheet = initializeSpreadsheet();

    // Parse the request parameters
    const putData = JSON.parse(e.postData.contents);
    const itemId = parseInt(putData.id, 10);
    const purchased = putData.purchased === "true" || putData.purchased === true;

    if (isNaN(itemId) || itemId < 1) {
      throw new Error("Valid item ID is required");
    }

    // Get all data excluding the header row
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    const headers = values.shift();  // Remove and store headers

    // Row ID is 1-based in the request, but data is 0-based after removing headers
    const rowIndex = itemId;

    if (rowIndex > values.length) {
      throw new Error("Item not found");
    }

    // Update the "Purchased" status (column index 2)
    sheet.getRange(rowIndex + 1, 3).setValue(purchased);

    return ContentService.createTextOutput(JSON.stringify({
      status: "success",
      message: "Item updated successfully",
      data: {
        id: itemId,
        purchased: purchased
      }
    }))
    .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      status: "error",
      message: error.toString()
    }))
    .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Initializes the spreadsheet when the script is loaded.
 * This ensures the sheet is properly set up before any requests are made.
 */
function onOpen() {
  initializeSpreadsheet();
}
